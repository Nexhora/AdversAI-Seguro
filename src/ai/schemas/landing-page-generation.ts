
/**
 * @fileOverview Schemas and types for the landing page generation flow,
 * following the new component-based architecture.
 */
import { z } from 'zod';

// Schema for the user input form.
export const GenerateLandingPageInputSchema = z.object({
  url: z.string().url("Por favor, introduce una URL válida.").optional().or(z.literal('')),
  productDescription: z.string().optional(),
  targetAudience: z.string().optional(),
  colorPalette: z.enum(['moderno_oscuro', 'corporativo_claro', 'atrevido_creativo']).default('moderno_oscuro').describe('El estilo visual para guiar a la IA.'),
}).refine(data => !!data.url || (!!data.productDescription && !!data.targetAudience), {
    message: "Debes proporcionar una URL, o bien una descripción del producto y el público objetivo.",
    path: ["productDescription"], // path to show the error
});
export type GenerateLandingPageInput = z.infer<typeof GenerateLandingPageInputSchema>;


// =================================================================
// SECTION-SPECIFIC PROP SCHEMAS
// =================================================================

// This enum is compatible with the Google AI API
const SectionTypeSchema = z.enum(['Hero', 'Features', 'Text', 'Button']);

// Define the exact props for the Hero section.
const HeroSectionPropsSchema = z.object({
    title: z.string().describe("El titular principal de la página, magnético y que enganche."),
    subtitle: z.string().describe("Un subtítulo que genere curiosidad y apoye al titular."),
    buttonText: z.string().describe("Un texto claro para el botón de llamada a la acción (ej. 'Comprar Ahora', 'Probar Gratis')."),
    bgColor: z.string().describe("Una clase de color de fondo de Tailwind CSS (ej. 'bg-gray-900', 'bg-white', 'bg-gradient-to-r from-blue-500 to-green-400')."),
    textColor: z.string().describe("Una clase de color de texto de Tailwind CSS que contraste con el fondo (ej. 'text-white', 'text-gray-800')."),
    textAlign: z.enum(['left', 'center', 'right']).describe("La alineación del texto en la sección."),
});

// Define the props for the Features section
const FeaturesSectionPropsSchema = z.object({
    title: z.string().describe("Un titular para la sección que resuma el valor (ej. 'Todo lo que necesitas para tener éxito')."),
    subtitle: z.string().optional().describe("Un subtítulo opcional que dé más contexto a las características."),
    features: z.array(z.object({
        icon: z.string().describe("El nombre de un icono de 'lucide-react' (ej. 'ShieldCheck', 'Rocket', 'BarChart')."),
        title: z.string().describe("El título de la característica (ej. 'Seguridad Avanzada')."),
        description: z.string().describe("Una descripción breve (1-2 frases) que explique la característica."),
    })).describe("Un array de 3 a 6 características clave del producto."),
    bgColor: z.string().describe("Clase de color de fondo (ej. 'bg-background' o 'bg-muted')."),
    textColor: z.string().describe("Clase de color de texto (ej. 'text-foreground')."),
});

// Define the props for the Text section
const TextSectionPropsSchema = z.object({
    text: z.string().describe("El contenido de texto (puede incluir Markdown básico)."),
    as: z.enum(['p', 'h1', 'h2', 'h3']).default('p').describe("El tipo de etiqueta HTML a usar para el texto (párrafo, titular, etc.)."),
    textAlign: z.enum(['left', 'center', 'right']).default('left').describe("La alineación del texto."),
    bgColor: z.string().default('bg-transparent').describe("Clase de color de fondo."),
    textColor: z.string().default('text-foreground').describe("Clase de color de texto."),
});

// Define the props for the Button section
const ButtonSectionPropsSchema = z.object({
    text: z.string().describe("El texto que se mostrará en el botón."),
    variant: z.enum(['default', 'destructive', 'outline', 'secondary', 'ghost', 'link']).default('default').describe("El estilo del botón."),
    textAlign: z.enum(['left', 'center', 'right']).default('center').describe("La alineación del contenedor del botón."),
    bgColor: z.string().default('bg-transparent').describe("Clase de color de fondo del contenedor."),
});


// =================================================================
// UNIFIED SECTION SCHEMA
// =================================================================

// This is the schema for a single section object as generated by the AI flow.
export const SectionSchema = z.object({
  id: z.string().optional(), // ID is added later, so it's optional here.
  type: SectionTypeSchema,
  props: z.union([
    HeroSectionPropsSchema,
    FeaturesSectionPropsSchema,
    TextSectionPropsSchema,
    ButtonSectionPropsSchema,
  ]),
});


// The final output schema from the AI flow. It is an object with a "page" key
// containing an array of sections.
export const GenerateLandingPageOutputFlowSchema = z.object({
  page: z.array(SectionSchema),
});


// =================================================================
// TYPES
// =================================================================

// This is the type returned by the FLOW ITSELF
export type GenerateLandingPageOutputFlow = z.infer<typeof GenerateLandingPageOutputFlowSchema>;

// This is the final type expected by the frontend (wrapped object)
export type GenerateLandingPageOutput = GenerateLandingPageOutputFlow;

    